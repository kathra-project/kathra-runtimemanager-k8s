// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"
	controllers "gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/controllers"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi"
	operations "gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations"
	"log"
	"os"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewKathraRuntimeEnvironmentManagerAPI(swaggerSpec)
	registerHandlers(api)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Kathra Runtime Environment Manager"
	parser.LongDescription = "KATHRA Runtime Environment Management API"

	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}

func registerHandlers(api *operations.KathraRuntimeEnvironmentManagerAPI) {
	api.EnvironmentManagementGetRuntimeEnvironmentHandler = controllers.GetRuntimeEnvironment()
	api.EnvironmentManagementGetRuntimeEnvironmentsHandler = controllers.GetRuntimeEnvironments()
	api.EnvironmentManagementAddRuntimeEnvironmentHandler = controllers.AddRuntimeEnvironment()
	api.EnvironmentManagementDeleteRuntimeEnvironmentHandler = controllers.DeleteRuntimeEnvironment()

	api.ApplicationManagementGetApplicationHandler = controllers.GetApplication()
	api.ApplicationManagementGetApplicationsFromRuntimeEnvironmentHandler = controllers.GetApplications()
	api.ApplicationManagementAddApplicationToRuntimeEnvironmentHandler = controllers.AddAplication()
	api.ApplicationManagementDeleteApplicationHandler = controllers.DeleteAplication()

	api.ApplicationManagementGetRuntimeAppServicesHandler = controllers.GetAppServices()

	api.ContainerManagementGetRuntimeContainerHandler = controllers.GetContainers()
}
