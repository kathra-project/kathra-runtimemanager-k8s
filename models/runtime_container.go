// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuntimeContainer runtime container
// swagger:model RuntimeContainer
type RuntimeContainer struct {

	// RuntimeContainer CPU usage limit
	CPULimit string `json:"cpuLimit,omitempty"`

	// RuntimeContainer image
	Image string `json:"image,omitempty"`

	// RuntimeContainer image hash
	ImageHash string `json:"imageHash,omitempty"`

	// RuntimeContainer Memory usage limit
	MemoryLimit string `json:"memoryLimit,omitempty"`

	// RuntimeContainer name
	Name string `json:"name,omitempty"`

	// RuntimeContainer providerId
	ProviderID string `json:"providerId,omitempty"`

	// RuntimeContainer status
	// Enum: [CREATING RUNNING PAUSED TERMINATING EXIT_WITH_SUCCES EXIT_WITH_ERROR]
	Status string `json:"status,omitempty"`
}

// Validate validates this runtime container
func (m *RuntimeContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var runtimeContainerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","RUNNING","PAUSED","TERMINATING","EXIT_WITH_SUCCES","EXIT_WITH_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runtimeContainerTypeStatusPropEnum = append(runtimeContainerTypeStatusPropEnum, v)
	}
}

const (

	// RuntimeContainerStatusCREATING captures enum value "CREATING"
	RuntimeContainerStatusCREATING string = "CREATING"

	// RuntimeContainerStatusRUNNING captures enum value "RUNNING"
	RuntimeContainerStatusRUNNING string = "RUNNING"

	// RuntimeContainerStatusPAUSED captures enum value "PAUSED"
	RuntimeContainerStatusPAUSED string = "PAUSED"

	// RuntimeContainerStatusTERMINATING captures enum value "TERMINATING"
	RuntimeContainerStatusTERMINATING string = "TERMINATING"

	// RuntimeContainerStatusEXITWITHSUCCES captures enum value "EXIT_WITH_SUCCES"
	RuntimeContainerStatusEXITWITHSUCCES string = "EXIT_WITH_SUCCES"

	// RuntimeContainerStatusEXITWITHERROR captures enum value "EXIT_WITH_ERROR"
	RuntimeContainerStatusEXITWITHERROR string = "EXIT_WITH_ERROR"
)

// prop value enum
func (m *RuntimeContainer) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, runtimeContainerTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RuntimeContainer) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeContainer) UnmarshalBinary(b []byte) error {
	var res RuntimeContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
