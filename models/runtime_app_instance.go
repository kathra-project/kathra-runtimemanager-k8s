// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RuntimeAppInstance runtime app instance
// swagger:model RuntimeAppInstance
type RuntimeAppInstance struct {

	// Catalog reference
	CatalogEntry *CatalogEntry `json:"catalogEntry,omitempty"`

	// RuntimeAppInstance name
	Name string `json:"name,omitempty"`

	// RuntimeAppInstance setting
	Parameters []*CatalogEntryArgument `json:"parameters"`

	// RuntimeAppInstance providerId
	ProviderID string `json:"providerId,omitempty"`

	// RuntimeEnvironment status
	// Enum: [DEPLOYED PENDING FAILED]
	Status string `json:"status,omitempty"`
}

// Validate validates this runtime app instance
func (m *RuntimeAppInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalogEntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RuntimeAppInstance) validateCatalogEntry(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogEntry) { // not required
		return nil
	}

	if m.CatalogEntry != nil {
		if err := m.CatalogEntry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("catalogEntry")
			}
			return err
		}
	}

	return nil
}

func (m *RuntimeAppInstance) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var runtimeAppInstanceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEPLOYED","PENDING","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runtimeAppInstanceTypeStatusPropEnum = append(runtimeAppInstanceTypeStatusPropEnum, v)
	}
}

const (

	// RuntimeAppInstanceStatusDEPLOYED captures enum value "DEPLOYED"
	RuntimeAppInstanceStatusDEPLOYED string = "DEPLOYED"

	// RuntimeAppInstanceStatusPENDING captures enum value "PENDING"
	RuntimeAppInstanceStatusPENDING string = "PENDING"

	// RuntimeAppInstanceStatusFAILED captures enum value "FAILED"
	RuntimeAppInstanceStatusFAILED string = "FAILED"
)

// prop value enum
func (m *RuntimeAppInstance) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, runtimeAppInstanceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RuntimeAppInstance) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RuntimeAppInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RuntimeAppInstance) UnmarshalBinary(b []byte) error {
	var res RuntimeAppInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
