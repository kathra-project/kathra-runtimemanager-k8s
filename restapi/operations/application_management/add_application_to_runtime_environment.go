// Code generated by go-swagger; DO NOT EDIT.

package application_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddApplicationToRuntimeEnvironmentHandlerFunc turns a function with the right signature into a add application to runtime environment handler
type AddApplicationToRuntimeEnvironmentHandlerFunc func(AddApplicationToRuntimeEnvironmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddApplicationToRuntimeEnvironmentHandlerFunc) Handle(params AddApplicationToRuntimeEnvironmentParams) middleware.Responder {
	return fn(params)
}

// AddApplicationToRuntimeEnvironmentHandler interface for that can handle valid add application to runtime environment params
type AddApplicationToRuntimeEnvironmentHandler interface {
	Handle(AddApplicationToRuntimeEnvironmentParams) middleware.Responder
}

// NewAddApplicationToRuntimeEnvironment creates a new http.Handler for the add application to runtime environment operation
func NewAddApplicationToRuntimeEnvironment(ctx *middleware.Context, handler AddApplicationToRuntimeEnvironmentHandler) *AddApplicationToRuntimeEnvironment {
	return &AddApplicationToRuntimeEnvironment{Context: ctx, Handler: handler}
}

/*AddApplicationToRuntimeEnvironment swagger:route POST /runtimeEnvironments/{providerId}/applications Application management addApplicationToRuntimeEnvironment

Add application to RuntimeEnvironment

*/
type AddApplicationToRuntimeEnvironment struct {
	Context *middleware.Context
	Handler AddApplicationToRuntimeEnvironmentHandler
}

func (o *AddApplicationToRuntimeEnvironment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddApplicationToRuntimeEnvironmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
