// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/application_management"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/backup_management"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/container_management"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/environment_management"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/job_management"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/load_balancer_management"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/logs"
	"gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/restapi/operations/volume_storage_management"
)

// NewKathraRuntimeEnvironmentManagerAPI creates a new KathraRuntimeEnvironmentManager instance
func NewKathraRuntimeEnvironmentManagerAPI(spec *loads.Document) *KathraRuntimeEnvironmentManagerAPI {
	return &KathraRuntimeEnvironmentManagerAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		customConsumers:       make(map[string]runtime.Consumer),
		customProducers:       make(map[string]runtime.Producer),
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		ApplicationManagementAddApplicationToRuntimeEnvironmentHandler: application_management.AddApplicationToRuntimeEnvironmentHandlerFunc(func(params application_management.AddApplicationToRuntimeEnvironmentParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplicationManagementAddApplicationToRuntimeEnvironment has not yet been implemented")
		}),
		BackupManagementAddBackupRuntimeEnvironmentsHandler: backup_management.AddBackupRuntimeEnvironmentsHandlerFunc(func(params backup_management.AddBackupRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackupManagementAddBackupRuntimeEnvironments has not yet been implemented")
		}),
		EnvironmentManagementAddRuntimeEnvironmentHandler: environment_management.AddRuntimeEnvironmentHandlerFunc(func(params environment_management.AddRuntimeEnvironmentParams) middleware.Responder {
			return middleware.NotImplemented("operation EnvironmentManagementAddRuntimeEnvironment has not yet been implemented")
		}),
		ApplicationManagementDeleteApplicationHandler: application_management.DeleteApplicationHandlerFunc(func(params application_management.DeleteApplicationParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplicationManagementDeleteApplication has not yet been implemented")
		}),
		BackupManagementDeleteBackupRuntimeEnvironmentsHandler: backup_management.DeleteBackupRuntimeEnvironmentsHandlerFunc(func(params backup_management.DeleteBackupRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackupManagementDeleteBackupRuntimeEnvironments has not yet been implemented")
		}),
		ContainerManagementDeleteRuntimeContainerHandler: container_management.DeleteRuntimeContainerHandlerFunc(func(params container_management.DeleteRuntimeContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainerManagementDeleteRuntimeContainer has not yet been implemented")
		}),
		EnvironmentManagementDeleteRuntimeEnvironmentHandler: environment_management.DeleteRuntimeEnvironmentHandlerFunc(func(params environment_management.DeleteRuntimeEnvironmentParams) middleware.Responder {
			return middleware.NotImplemented("operation EnvironmentManagementDeleteRuntimeEnvironment has not yet been implemented")
		}),
		BackupManagementDownloadBackupRuntimeEnvironmentsHandler: backup_management.DownloadBackupRuntimeEnvironmentsHandlerFunc(func(params backup_management.DownloadBackupRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackupManagementDownloadBackupRuntimeEnvironments has not yet been implemented")
		}),
		ApplicationManagementGetApplicationHandler: application_management.GetApplicationHandlerFunc(func(params application_management.GetApplicationParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplicationManagementGetApplication has not yet been implemented")
		}),
		ApplicationManagementGetApplicationsFromRuntimeEnvironmentHandler: application_management.GetApplicationsFromRuntimeEnvironmentHandlerFunc(func(params application_management.GetApplicationsFromRuntimeEnvironmentParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplicationManagementGetApplicationsFromRuntimeEnvironment has not yet been implemented")
		}),
		BackupManagementGetBackupRuntimeEnvironmentsHandler: backup_management.GetBackupRuntimeEnvironmentsHandlerFunc(func(params backup_management.GetBackupRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackupManagementGetBackupRuntimeEnvironments has not yet been implemented")
		}),
		LoadBalancerManagementGetLoadBalancersFromRuntimeHandler: load_balancer_management.GetLoadBalancersFromRuntimeHandlerFunc(func(params load_balancer_management.GetLoadBalancersFromRuntimeParams) middleware.Responder {
			return middleware.NotImplemented("operation LoadBalancerManagementGetLoadBalancersFromRuntime has not yet been implemented")
		}),
		LogsGetLogsHandler: logs.GetLogsHandlerFunc(func(params logs.GetLogsParams) middleware.Responder {
			return middleware.NotImplemented("operation LogsGetLogs has not yet been implemented")
		}),
		ApplicationManagementGetRuntimeAppServicesHandler: application_management.GetRuntimeAppServicesHandlerFunc(func(params application_management.GetRuntimeAppServicesParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplicationManagementGetRuntimeAppServices has not yet been implemented")
		}),
		ContainerManagementGetRuntimeContainerHandler: container_management.GetRuntimeContainerHandlerFunc(func(params container_management.GetRuntimeContainerParams) middleware.Responder {
			return middleware.NotImplemented("operation ContainerManagementGetRuntimeContainer has not yet been implemented")
		}),
		EnvironmentManagementGetRuntimeEnvironmentHandler: environment_management.GetRuntimeEnvironmentHandlerFunc(func(params environment_management.GetRuntimeEnvironmentParams) middleware.Responder {
			return middleware.NotImplemented("operation EnvironmentManagementGetRuntimeEnvironment has not yet been implemented")
		}),
		EnvironmentManagementGetRuntimeEnvironmentsHandler: environment_management.GetRuntimeEnvironmentsHandlerFunc(func(params environment_management.GetRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation EnvironmentManagementGetRuntimeEnvironments has not yet been implemented")
		}),
		JobManagementGetRuntimeJobsHandler: job_management.GetRuntimeJobsHandlerFunc(func(params job_management.GetRuntimeJobsParams) middleware.Responder {
			return middleware.NotImplemented("operation JobManagementGetRuntimeJobs has not yet been implemented")
		}),
		VolumeStorageManagementGetRuntimeVolumeHandler: volume_storage_management.GetRuntimeVolumeHandlerFunc(func(params volume_storage_management.GetRuntimeVolumeParams) middleware.Responder {
			return middleware.NotImplemented("operation VolumeStorageManagementGetRuntimeVolume has not yet been implemented")
		}),
		BackupManagementImportBackupRuntimeEnvironmentsHandler: backup_management.ImportBackupRuntimeEnvironmentsHandlerFunc(func(params backup_management.ImportBackupRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackupManagementImportBackupRuntimeEnvironments has not yet been implemented")
		}),
		BackupManagementRestoreBackupRuntimeEnvironmentsHandler: backup_management.RestoreBackupRuntimeEnvironmentsHandlerFunc(func(params backup_management.RestoreBackupRuntimeEnvironmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackupManagementRestoreBackupRuntimeEnvironments has not yet been implemented")
		}),
		ApplicationManagementUpdateApplicationToRuntimeEnvironmentHandler: application_management.UpdateApplicationToRuntimeEnvironmentHandlerFunc(func(params application_management.UpdateApplicationToRuntimeEnvironmentParams) middleware.Responder {
			return middleware.NotImplemented("operation ApplicationManagementUpdateApplicationToRuntimeEnvironment has not yet been implemented")
		}),
	}
}

/*KathraRuntimeEnvironmentManagerAPI KATHRA Runtime Environment Management API */
type KathraRuntimeEnvironmentManagerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ApplicationManagementAddApplicationToRuntimeEnvironmentHandler sets the operation handler for the add application to runtime environment operation
	ApplicationManagementAddApplicationToRuntimeEnvironmentHandler application_management.AddApplicationToRuntimeEnvironmentHandler
	// BackupManagementAddBackupRuntimeEnvironmentsHandler sets the operation handler for the add backup runtime environments operation
	BackupManagementAddBackupRuntimeEnvironmentsHandler backup_management.AddBackupRuntimeEnvironmentsHandler
	// EnvironmentManagementAddRuntimeEnvironmentHandler sets the operation handler for the add runtime environment operation
	EnvironmentManagementAddRuntimeEnvironmentHandler environment_management.AddRuntimeEnvironmentHandler
	// ApplicationManagementDeleteApplicationHandler sets the operation handler for the delete application operation
	ApplicationManagementDeleteApplicationHandler application_management.DeleteApplicationHandler
	// BackupManagementDeleteBackupRuntimeEnvironmentsHandler sets the operation handler for the delete backup runtime environments operation
	BackupManagementDeleteBackupRuntimeEnvironmentsHandler backup_management.DeleteBackupRuntimeEnvironmentsHandler
	// ContainerManagementDeleteRuntimeContainerHandler sets the operation handler for the delete runtime container operation
	ContainerManagementDeleteRuntimeContainerHandler container_management.DeleteRuntimeContainerHandler
	// EnvironmentManagementDeleteRuntimeEnvironmentHandler sets the operation handler for the delete runtime environment operation
	EnvironmentManagementDeleteRuntimeEnvironmentHandler environment_management.DeleteRuntimeEnvironmentHandler
	// BackupManagementDownloadBackupRuntimeEnvironmentsHandler sets the operation handler for the download backup runtime environments operation
	BackupManagementDownloadBackupRuntimeEnvironmentsHandler backup_management.DownloadBackupRuntimeEnvironmentsHandler
	// ApplicationManagementGetApplicationHandler sets the operation handler for the get application operation
	ApplicationManagementGetApplicationHandler application_management.GetApplicationHandler
	// ApplicationManagementGetApplicationsFromRuntimeEnvironmentHandler sets the operation handler for the get applications from runtime environment operation
	ApplicationManagementGetApplicationsFromRuntimeEnvironmentHandler application_management.GetApplicationsFromRuntimeEnvironmentHandler
	// BackupManagementGetBackupRuntimeEnvironmentsHandler sets the operation handler for the get backup runtime environments operation
	BackupManagementGetBackupRuntimeEnvironmentsHandler backup_management.GetBackupRuntimeEnvironmentsHandler
	// LoadBalancerManagementGetLoadBalancersFromRuntimeHandler sets the operation handler for the get load balancers from runtime operation
	LoadBalancerManagementGetLoadBalancersFromRuntimeHandler load_balancer_management.GetLoadBalancersFromRuntimeHandler
	// LogsGetLogsHandler sets the operation handler for the get logs operation
	LogsGetLogsHandler logs.GetLogsHandler
	// ApplicationManagementGetRuntimeAppServicesHandler sets the operation handler for the get runtime app services operation
	ApplicationManagementGetRuntimeAppServicesHandler application_management.GetRuntimeAppServicesHandler
	// ContainerManagementGetRuntimeContainerHandler sets the operation handler for the get runtime container operation
	ContainerManagementGetRuntimeContainerHandler container_management.GetRuntimeContainerHandler
	// EnvironmentManagementGetRuntimeEnvironmentHandler sets the operation handler for the get runtime environment operation
	EnvironmentManagementGetRuntimeEnvironmentHandler environment_management.GetRuntimeEnvironmentHandler
	// EnvironmentManagementGetRuntimeEnvironmentsHandler sets the operation handler for the get runtime environments operation
	EnvironmentManagementGetRuntimeEnvironmentsHandler environment_management.GetRuntimeEnvironmentsHandler
	// JobManagementGetRuntimeJobsHandler sets the operation handler for the get runtime jobs operation
	JobManagementGetRuntimeJobsHandler job_management.GetRuntimeJobsHandler
	// VolumeStorageManagementGetRuntimeVolumeHandler sets the operation handler for the get runtime volume operation
	VolumeStorageManagementGetRuntimeVolumeHandler volume_storage_management.GetRuntimeVolumeHandler
	// BackupManagementImportBackupRuntimeEnvironmentsHandler sets the operation handler for the import backup runtime environments operation
	BackupManagementImportBackupRuntimeEnvironmentsHandler backup_management.ImportBackupRuntimeEnvironmentsHandler
	// BackupManagementRestoreBackupRuntimeEnvironmentsHandler sets the operation handler for the restore backup runtime environments operation
	BackupManagementRestoreBackupRuntimeEnvironmentsHandler backup_management.RestoreBackupRuntimeEnvironmentsHandler
	// ApplicationManagementUpdateApplicationToRuntimeEnvironmentHandler sets the operation handler for the update application to runtime environment operation
	ApplicationManagementUpdateApplicationToRuntimeEnvironmentHandler application_management.UpdateApplicationToRuntimeEnvironmentHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *KathraRuntimeEnvironmentManagerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KathraRuntimeEnvironmentManagerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KathraRuntimeEnvironmentManagerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KathraRuntimeEnvironmentManagerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KathraRuntimeEnvironmentManagerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KathraRuntimeEnvironmentManagerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KathraRuntimeEnvironmentManagerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KathraRuntimeEnvironmentManagerAPI
func (o *KathraRuntimeEnvironmentManagerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ApplicationManagementAddApplicationToRuntimeEnvironmentHandler == nil {
		unregistered = append(unregistered, "application_management.AddApplicationToRuntimeEnvironmentHandler")
	}

	if o.BackupManagementAddBackupRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "backup_management.AddBackupRuntimeEnvironmentsHandler")
	}

	if o.EnvironmentManagementAddRuntimeEnvironmentHandler == nil {
		unregistered = append(unregistered, "environment_management.AddRuntimeEnvironmentHandler")
	}

	if o.ApplicationManagementDeleteApplicationHandler == nil {
		unregistered = append(unregistered, "application_management.DeleteApplicationHandler")
	}

	if o.BackupManagementDeleteBackupRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "backup_management.DeleteBackupRuntimeEnvironmentsHandler")
	}

	if o.ContainerManagementDeleteRuntimeContainerHandler == nil {
		unregistered = append(unregistered, "container_management.DeleteRuntimeContainerHandler")
	}

	if o.EnvironmentManagementDeleteRuntimeEnvironmentHandler == nil {
		unregistered = append(unregistered, "environment_management.DeleteRuntimeEnvironmentHandler")
	}

	if o.BackupManagementDownloadBackupRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "backup_management.DownloadBackupRuntimeEnvironmentsHandler")
	}

	if o.ApplicationManagementGetApplicationHandler == nil {
		unregistered = append(unregistered, "application_management.GetApplicationHandler")
	}

	if o.ApplicationManagementGetApplicationsFromRuntimeEnvironmentHandler == nil {
		unregistered = append(unregistered, "application_management.GetApplicationsFromRuntimeEnvironmentHandler")
	}

	if o.BackupManagementGetBackupRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "backup_management.GetBackupRuntimeEnvironmentsHandler")
	}

	if o.LoadBalancerManagementGetLoadBalancersFromRuntimeHandler == nil {
		unregistered = append(unregistered, "load_balancer_management.GetLoadBalancersFromRuntimeHandler")
	}

	if o.LogsGetLogsHandler == nil {
		unregistered = append(unregistered, "logs.GetLogsHandler")
	}

	if o.ApplicationManagementGetRuntimeAppServicesHandler == nil {
		unregistered = append(unregistered, "application_management.GetRuntimeAppServicesHandler")
	}

	if o.ContainerManagementGetRuntimeContainerHandler == nil {
		unregistered = append(unregistered, "container_management.GetRuntimeContainerHandler")
	}

	if o.EnvironmentManagementGetRuntimeEnvironmentHandler == nil {
		unregistered = append(unregistered, "environment_management.GetRuntimeEnvironmentHandler")
	}

	if o.EnvironmentManagementGetRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "environment_management.GetRuntimeEnvironmentsHandler")
	}

	if o.JobManagementGetRuntimeJobsHandler == nil {
		unregistered = append(unregistered, "job_management.GetRuntimeJobsHandler")
	}

	if o.VolumeStorageManagementGetRuntimeVolumeHandler == nil {
		unregistered = append(unregistered, "volume_storage_management.GetRuntimeVolumeHandler")
	}

	if o.BackupManagementImportBackupRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "backup_management.ImportBackupRuntimeEnvironmentsHandler")
	}

	if o.BackupManagementRestoreBackupRuntimeEnvironmentsHandler == nil {
		unregistered = append(unregistered, "backup_management.RestoreBackupRuntimeEnvironmentsHandler")
	}

	if o.ApplicationManagementUpdateApplicationToRuntimeEnvironmentHandler == nil {
		unregistered = append(unregistered, "application_management.UpdateApplicationToRuntimeEnvironmentHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KathraRuntimeEnvironmentManagerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KathraRuntimeEnvironmentManagerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *KathraRuntimeEnvironmentManagerAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *KathraRuntimeEnvironmentManagerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *KathraRuntimeEnvironmentManagerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KathraRuntimeEnvironmentManagerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the kathra runtime environment manager API
func (o *KathraRuntimeEnvironmentManagerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KathraRuntimeEnvironmentManagerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/runtimeEnvironments/{providerId}/applications"] = application_management.NewAddApplicationToRuntimeEnvironment(o.context, o.ApplicationManagementAddApplicationToRuntimeEnvironmentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/runtimeEnvironments/{providerId}/backups"] = backup_management.NewAddBackupRuntimeEnvironments(o.context, o.BackupManagementAddBackupRuntimeEnvironmentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/runtimeEnvironments"] = environment_management.NewAddRuntimeEnvironment(o.context, o.EnvironmentManagementAddRuntimeEnvironmentHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}"] = application_management.NewDeleteApplication(o.context, o.ApplicationManagementDeleteApplicationHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/runtimeEnvironments/{providerId}/backups/{providerIdBackup}"] = backup_management.NewDeleteBackupRuntimeEnvironments(o.context, o.BackupManagementDeleteBackupRuntimeEnvironmentsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}/containers/{providerIdContainer}"] = container_management.NewDeleteRuntimeContainer(o.context, o.ContainerManagementDeleteRuntimeContainerHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/runtimeEnvironments/{providerId}"] = environment_management.NewDeleteRuntimeEnvironment(o.context, o.EnvironmentManagementDeleteRuntimeEnvironmentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/runtimeEnvironments/{providerId}/backups/{providerIdBackup}/download"] = backup_management.NewDownloadBackupRuntimeEnvironments(o.context, o.BackupManagementDownloadBackupRuntimeEnvironmentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}"] = application_management.NewGetApplication(o.context, o.ApplicationManagementGetApplicationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerId}/applications"] = application_management.NewGetApplicationsFromRuntimeEnvironment(o.context, o.ApplicationManagementGetApplicationsFromRuntimeEnvironmentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerId}/backups"] = backup_management.NewGetBackupRuntimeEnvironments(o.context, o.BackupManagementGetBackupRuntimeEnvironmentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/loadbalancers"] = load_balancer_management.NewGetLoadBalancersFromRuntime(o.context, o.LoadBalancerManagementGetLoadBalancersFromRuntimeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}/logs"] = logs.NewGetLogs(o.context, o.LogsGetLogsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}/services"] = application_management.NewGetRuntimeAppServices(o.context, o.ApplicationManagementGetRuntimeAppServicesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}/containers"] = container_management.NewGetRuntimeContainer(o.context, o.ContainerManagementGetRuntimeContainerHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerId}"] = environment_management.NewGetRuntimeEnvironment(o.context, o.EnvironmentManagementGetRuntimeEnvironmentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments"] = environment_management.NewGetRuntimeEnvironments(o.context, o.EnvironmentManagementGetRuntimeEnvironmentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}/jobs"] = job_management.NewGetRuntimeJobs(o.context, o.JobManagementGetRuntimeJobsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/runtimeEnvironments/{providerIdRE}/applications/{providerIdAI}/volumes"] = volume_storage_management.NewGetRuntimeVolume(o.context, o.VolumeStorageManagementGetRuntimeVolumeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/runtimeEnvironments/{providerId}/backups/import"] = backup_management.NewImportBackupRuntimeEnvironments(o.context, o.BackupManagementImportBackupRuntimeEnvironmentsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/runtimeEnvironments/{providerId}/backups/{providerIdBackup}/restore"] = backup_management.NewRestoreBackupRuntimeEnvironments(o.context, o.BackupManagementRestoreBackupRuntimeEnvironmentsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/runtimeEnvironments/{providerId}/applications"] = application_management.NewUpdateApplicationToRuntimeEnvironment(o.context, o.ApplicationManagementUpdateApplicationToRuntimeEnvironmentHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KathraRuntimeEnvironmentManagerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *KathraRuntimeEnvironmentManagerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *KathraRuntimeEnvironmentManagerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *KathraRuntimeEnvironmentManagerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
