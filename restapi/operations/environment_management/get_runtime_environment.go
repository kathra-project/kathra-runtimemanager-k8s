// Code generated by go-swagger; DO NOT EDIT.

package environment_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRuntimeEnvironmentHandlerFunc turns a function with the right signature into a get runtime environment handler
type GetRuntimeEnvironmentHandlerFunc func(GetRuntimeEnvironmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRuntimeEnvironmentHandlerFunc) Handle(params GetRuntimeEnvironmentParams) middleware.Responder {
	return fn(params)
}

// GetRuntimeEnvironmentHandler interface for that can handle valid get runtime environment params
type GetRuntimeEnvironmentHandler interface {
	Handle(GetRuntimeEnvironmentParams) middleware.Responder
}

// NewGetRuntimeEnvironment creates a new http.Handler for the get runtime environment operation
func NewGetRuntimeEnvironment(ctx *middleware.Context, handler GetRuntimeEnvironmentHandler) *GetRuntimeEnvironment {
	return &GetRuntimeEnvironment{Context: ctx, Handler: handler}
}

/*GetRuntimeEnvironment swagger:route GET /runtimeEnvironments/{providerId} Environment management getRuntimeEnvironment

Get RuntimeEnvironment

*/
type GetRuntimeEnvironment struct {
	Context *middleware.Context
	Handler GetRuntimeEnvironmentHandler
}

func (o *GetRuntimeEnvironment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRuntimeEnvironmentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
