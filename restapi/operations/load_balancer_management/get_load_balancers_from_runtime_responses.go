// Code generated by go-swagger; DO NOT EDIT.

package load_balancer_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/models"
)

// GetLoadBalancersFromRuntimeOKCode is the HTTP code returned for type GetLoadBalancersFromRuntimeOK
const GetLoadBalancersFromRuntimeOKCode int = 200

/*GetLoadBalancersFromRuntimeOK RuntimeLoadBalancer from RuntimeEnvironment

swagger:response getLoadBalancersFromRuntimeOK
*/
type GetLoadBalancersFromRuntimeOK struct {

	/*
	  In: Body
	*/
	Payload []*models.RuntimeHTTPLoadBalancer `json:"body,omitempty"`
}

// NewGetLoadBalancersFromRuntimeOK creates GetLoadBalancersFromRuntimeOK with default headers values
func NewGetLoadBalancersFromRuntimeOK() *GetLoadBalancersFromRuntimeOK {

	return &GetLoadBalancersFromRuntimeOK{}
}

// WithPayload adds the payload to the get load balancers from runtime o k response
func (o *GetLoadBalancersFromRuntimeOK) WithPayload(payload []*models.RuntimeHTTPLoadBalancer) *GetLoadBalancersFromRuntimeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get load balancers from runtime o k response
func (o *GetLoadBalancersFromRuntimeOK) SetPayload(payload []*models.RuntimeHTTPLoadBalancer) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLoadBalancersFromRuntimeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.RuntimeHTTPLoadBalancer, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLoadBalancersFromRuntimeBadRequestCode is the HTTP code returned for type GetLoadBalancersFromRuntimeBadRequest
const GetLoadBalancersFromRuntimeBadRequestCode int = 400

/*GetLoadBalancersFromRuntimeBadRequest Bad request

swagger:response getLoadBalancersFromRuntimeBadRequest
*/
type GetLoadBalancersFromRuntimeBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetLoadBalancersFromRuntimeBadRequest creates GetLoadBalancersFromRuntimeBadRequest with default headers values
func NewGetLoadBalancersFromRuntimeBadRequest() *GetLoadBalancersFromRuntimeBadRequest {

	return &GetLoadBalancersFromRuntimeBadRequest{}
}

// WithPayload adds the payload to the get load balancers from runtime bad request response
func (o *GetLoadBalancersFromRuntimeBadRequest) WithPayload(payload string) *GetLoadBalancersFromRuntimeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get load balancers from runtime bad request response
func (o *GetLoadBalancersFromRuntimeBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLoadBalancersFromRuntimeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLoadBalancersFromRuntimeNotFoundCode is the HTTP code returned for type GetLoadBalancersFromRuntimeNotFound
const GetLoadBalancersFromRuntimeNotFoundCode int = 404

/*GetLoadBalancersFromRuntimeNotFound Not found

swagger:response getLoadBalancersFromRuntimeNotFound
*/
type GetLoadBalancersFromRuntimeNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetLoadBalancersFromRuntimeNotFound creates GetLoadBalancersFromRuntimeNotFound with default headers values
func NewGetLoadBalancersFromRuntimeNotFound() *GetLoadBalancersFromRuntimeNotFound {

	return &GetLoadBalancersFromRuntimeNotFound{}
}

// WithPayload adds the payload to the get load balancers from runtime not found response
func (o *GetLoadBalancersFromRuntimeNotFound) WithPayload(payload string) *GetLoadBalancersFromRuntimeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get load balancers from runtime not found response
func (o *GetLoadBalancersFromRuntimeNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLoadBalancersFromRuntimeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetLoadBalancersFromRuntimeInternalServerErrorCode is the HTTP code returned for type GetLoadBalancersFromRuntimeInternalServerError
const GetLoadBalancersFromRuntimeInternalServerErrorCode int = 500

/*GetLoadBalancersFromRuntimeInternalServerError Internal error

swagger:response getLoadBalancersFromRuntimeInternalServerError
*/
type GetLoadBalancersFromRuntimeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetLoadBalancersFromRuntimeInternalServerError creates GetLoadBalancersFromRuntimeInternalServerError with default headers values
func NewGetLoadBalancersFromRuntimeInternalServerError() *GetLoadBalancersFromRuntimeInternalServerError {

	return &GetLoadBalancersFromRuntimeInternalServerError{}
}

// WithPayload adds the payload to the get load balancers from runtime internal server error response
func (o *GetLoadBalancersFromRuntimeInternalServerError) WithPayload(payload string) *GetLoadBalancersFromRuntimeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get load balancers from runtime internal server error response
func (o *GetLoadBalancersFromRuntimeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetLoadBalancersFromRuntimeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
