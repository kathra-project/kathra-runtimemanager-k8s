// Code generated by go-swagger; DO NOT EDIT.

package load_balancer_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLoadBalancersFromRuntimeHandlerFunc turns a function with the right signature into a get load balancers from runtime handler
type GetLoadBalancersFromRuntimeHandlerFunc func(GetLoadBalancersFromRuntimeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLoadBalancersFromRuntimeHandlerFunc) Handle(params GetLoadBalancersFromRuntimeParams) middleware.Responder {
	return fn(params)
}

// GetLoadBalancersFromRuntimeHandler interface for that can handle valid get load balancers from runtime params
type GetLoadBalancersFromRuntimeHandler interface {
	Handle(GetLoadBalancersFromRuntimeParams) middleware.Responder
}

// NewGetLoadBalancersFromRuntime creates a new http.Handler for the get load balancers from runtime operation
func NewGetLoadBalancersFromRuntime(ctx *middleware.Context, handler GetLoadBalancersFromRuntimeHandler) *GetLoadBalancersFromRuntime {
	return &GetLoadBalancersFromRuntime{Context: ctx, Handler: handler}
}

/*GetLoadBalancersFromRuntime swagger:route GET /runtimeEnvironments/{providerIdRE}/loadbalancers Load balancer management getLoadBalancersFromRuntime

Get RuntimeAppServices

*/
type GetLoadBalancersFromRuntime struct {
	Context *middleware.Context
	Handler GetLoadBalancersFromRuntimeHandler
}

func (o *GetLoadBalancersFromRuntime) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetLoadBalancersFromRuntimeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
