// Code generated by go-swagger; DO NOT EDIT.

package backup_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddBackupRuntimeEnvironmentsHandlerFunc turns a function with the right signature into a add backup runtime environments handler
type AddBackupRuntimeEnvironmentsHandlerFunc func(AddBackupRuntimeEnvironmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddBackupRuntimeEnvironmentsHandlerFunc) Handle(params AddBackupRuntimeEnvironmentsParams) middleware.Responder {
	return fn(params)
}

// AddBackupRuntimeEnvironmentsHandler interface for that can handle valid add backup runtime environments params
type AddBackupRuntimeEnvironmentsHandler interface {
	Handle(AddBackupRuntimeEnvironmentsParams) middleware.Responder
}

// NewAddBackupRuntimeEnvironments creates a new http.Handler for the add backup runtime environments operation
func NewAddBackupRuntimeEnvironments(ctx *middleware.Context, handler AddBackupRuntimeEnvironmentsHandler) *AddBackupRuntimeEnvironments {
	return &AddBackupRuntimeEnvironments{Context: ctx, Handler: handler}
}

/*AddBackupRuntimeEnvironments swagger:route POST /runtimeEnvironments/{providerId}/backups Backup management addBackupRuntimeEnvironments

Create backup from current RuntimeEnvironment

*/
type AddBackupRuntimeEnvironments struct {
	Context *middleware.Context
	Handler AddBackupRuntimeEnvironmentsHandler
}

func (o *AddBackupRuntimeEnvironments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAddBackupRuntimeEnvironmentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
