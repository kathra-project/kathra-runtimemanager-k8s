// Code generated by go-swagger; DO NOT EDIT.

package backup_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/models"
)

// GetBackupRuntimeEnvironmentsOKCode is the HTTP code returned for type GetBackupRuntimeEnvironmentsOK
const GetBackupRuntimeEnvironmentsOKCode int = 200

/*GetBackupRuntimeEnvironmentsOK Runtimes environments backups

swagger:response getBackupRuntimeEnvironmentsOK
*/
type GetBackupRuntimeEnvironmentsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.RuntimeEnvironmentBackup `json:"body,omitempty"`
}

// NewGetBackupRuntimeEnvironmentsOK creates GetBackupRuntimeEnvironmentsOK with default headers values
func NewGetBackupRuntimeEnvironmentsOK() *GetBackupRuntimeEnvironmentsOK {

	return &GetBackupRuntimeEnvironmentsOK{}
}

// WithPayload adds the payload to the get backup runtime environments o k response
func (o *GetBackupRuntimeEnvironmentsOK) WithPayload(payload []*models.RuntimeEnvironmentBackup) *GetBackupRuntimeEnvironmentsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backup runtime environments o k response
func (o *GetBackupRuntimeEnvironmentsOK) SetPayload(payload []*models.RuntimeEnvironmentBackup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackupRuntimeEnvironmentsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.RuntimeEnvironmentBackup, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetBackupRuntimeEnvironmentsBadRequestCode is the HTTP code returned for type GetBackupRuntimeEnvironmentsBadRequest
const GetBackupRuntimeEnvironmentsBadRequestCode int = 400

/*GetBackupRuntimeEnvironmentsBadRequest Bad request

swagger:response getBackupRuntimeEnvironmentsBadRequest
*/
type GetBackupRuntimeEnvironmentsBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetBackupRuntimeEnvironmentsBadRequest creates GetBackupRuntimeEnvironmentsBadRequest with default headers values
func NewGetBackupRuntimeEnvironmentsBadRequest() *GetBackupRuntimeEnvironmentsBadRequest {

	return &GetBackupRuntimeEnvironmentsBadRequest{}
}

// WithPayload adds the payload to the get backup runtime environments bad request response
func (o *GetBackupRuntimeEnvironmentsBadRequest) WithPayload(payload string) *GetBackupRuntimeEnvironmentsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backup runtime environments bad request response
func (o *GetBackupRuntimeEnvironmentsBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackupRuntimeEnvironmentsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetBackupRuntimeEnvironmentsNotFoundCode is the HTTP code returned for type GetBackupRuntimeEnvironmentsNotFound
const GetBackupRuntimeEnvironmentsNotFoundCode int = 404

/*GetBackupRuntimeEnvironmentsNotFound Not found

swagger:response getBackupRuntimeEnvironmentsNotFound
*/
type GetBackupRuntimeEnvironmentsNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetBackupRuntimeEnvironmentsNotFound creates GetBackupRuntimeEnvironmentsNotFound with default headers values
func NewGetBackupRuntimeEnvironmentsNotFound() *GetBackupRuntimeEnvironmentsNotFound {

	return &GetBackupRuntimeEnvironmentsNotFound{}
}

// WithPayload adds the payload to the get backup runtime environments not found response
func (o *GetBackupRuntimeEnvironmentsNotFound) WithPayload(payload string) *GetBackupRuntimeEnvironmentsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backup runtime environments not found response
func (o *GetBackupRuntimeEnvironmentsNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackupRuntimeEnvironmentsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetBackupRuntimeEnvironmentsInternalServerErrorCode is the HTTP code returned for type GetBackupRuntimeEnvironmentsInternalServerError
const GetBackupRuntimeEnvironmentsInternalServerErrorCode int = 500

/*GetBackupRuntimeEnvironmentsInternalServerError Internal error

swagger:response getBackupRuntimeEnvironmentsInternalServerError
*/
type GetBackupRuntimeEnvironmentsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetBackupRuntimeEnvironmentsInternalServerError creates GetBackupRuntimeEnvironmentsInternalServerError with default headers values
func NewGetBackupRuntimeEnvironmentsInternalServerError() *GetBackupRuntimeEnvironmentsInternalServerError {

	return &GetBackupRuntimeEnvironmentsInternalServerError{}
}

// WithPayload adds the payload to the get backup runtime environments internal server error response
func (o *GetBackupRuntimeEnvironmentsInternalServerError) WithPayload(payload string) *GetBackupRuntimeEnvironmentsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backup runtime environments internal server error response
func (o *GetBackupRuntimeEnvironmentsInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackupRuntimeEnvironmentsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
