// Code generated by go-swagger; DO NOT EDIT.

package backup_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ImportBackupRuntimeEnvironmentsHandlerFunc turns a function with the right signature into a import backup runtime environments handler
type ImportBackupRuntimeEnvironmentsHandlerFunc func(ImportBackupRuntimeEnvironmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ImportBackupRuntimeEnvironmentsHandlerFunc) Handle(params ImportBackupRuntimeEnvironmentsParams) middleware.Responder {
	return fn(params)
}

// ImportBackupRuntimeEnvironmentsHandler interface for that can handle valid import backup runtime environments params
type ImportBackupRuntimeEnvironmentsHandler interface {
	Handle(ImportBackupRuntimeEnvironmentsParams) middleware.Responder
}

// NewImportBackupRuntimeEnvironments creates a new http.Handler for the import backup runtime environments operation
func NewImportBackupRuntimeEnvironments(ctx *middleware.Context, handler ImportBackupRuntimeEnvironmentsHandler) *ImportBackupRuntimeEnvironments {
	return &ImportBackupRuntimeEnvironments{Context: ctx, Handler: handler}
}

/*ImportBackupRuntimeEnvironments swagger:route POST /runtimeEnvironments/{providerId}/backups/import Backup management importBackupRuntimeEnvironments

Import backup archive fromuploaded file or url

*/
type ImportBackupRuntimeEnvironments struct {
	Context *middleware.Context
	Handler ImportBackupRuntimeEnvironmentsHandler
}

func (o *ImportBackupRuntimeEnvironments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewImportBackupRuntimeEnvironmentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
