// Code generated by go-swagger; DO NOT EDIT.

package backup_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DownloadBackupRuntimeEnvironmentsHandlerFunc turns a function with the right signature into a download backup runtime environments handler
type DownloadBackupRuntimeEnvironmentsHandlerFunc func(DownloadBackupRuntimeEnvironmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadBackupRuntimeEnvironmentsHandlerFunc) Handle(params DownloadBackupRuntimeEnvironmentsParams) middleware.Responder {
	return fn(params)
}

// DownloadBackupRuntimeEnvironmentsHandler interface for that can handle valid download backup runtime environments params
type DownloadBackupRuntimeEnvironmentsHandler interface {
	Handle(DownloadBackupRuntimeEnvironmentsParams) middleware.Responder
}

// NewDownloadBackupRuntimeEnvironments creates a new http.Handler for the download backup runtime environments operation
func NewDownloadBackupRuntimeEnvironments(ctx *middleware.Context, handler DownloadBackupRuntimeEnvironmentsHandler) *DownloadBackupRuntimeEnvironments {
	return &DownloadBackupRuntimeEnvironments{Context: ctx, Handler: handler}
}

/*DownloadBackupRuntimeEnvironments swagger:route POST /runtimeEnvironments/{providerId}/backups/{providerIdBackup}/download Backup management downloadBackupRuntimeEnvironments

Download backup archive

*/
type DownloadBackupRuntimeEnvironments struct {
	Context *middleware.Context
	Handler DownloadBackupRuntimeEnvironmentsHandler
}

func (o *DownloadBackupRuntimeEnvironments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDownloadBackupRuntimeEnvironmentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
