// Code generated by go-swagger; DO NOT EDIT.

package volume_storage_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "gitlab.com/kathra/kathra/kathra-services/kathra-runtimemanager/kathra-runtimemanager-go/kathra-runtimemanager-k8s/models"
)

// GetRuntimeVolumeOKCode is the HTTP code returned for type GetRuntimeVolumeOK
const GetRuntimeVolumeOKCode int = 200

/*GetRuntimeVolumeOK RuntimeVolume from RuntimeAppInstance

swagger:response getRuntimeVolumeOK
*/
type GetRuntimeVolumeOK struct {

	/*
	  In: Body
	*/
	Payload []*models.RuntimeVolume `json:"body,omitempty"`
}

// NewGetRuntimeVolumeOK creates GetRuntimeVolumeOK with default headers values
func NewGetRuntimeVolumeOK() *GetRuntimeVolumeOK {

	return &GetRuntimeVolumeOK{}
}

// WithPayload adds the payload to the get runtime volume o k response
func (o *GetRuntimeVolumeOK) WithPayload(payload []*models.RuntimeVolume) *GetRuntimeVolumeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runtime volume o k response
func (o *GetRuntimeVolumeOK) SetPayload(payload []*models.RuntimeVolume) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRuntimeVolumeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.RuntimeVolume, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRuntimeVolumeBadRequestCode is the HTTP code returned for type GetRuntimeVolumeBadRequest
const GetRuntimeVolumeBadRequestCode int = 400

/*GetRuntimeVolumeBadRequest Bad request

swagger:response getRuntimeVolumeBadRequest
*/
type GetRuntimeVolumeBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetRuntimeVolumeBadRequest creates GetRuntimeVolumeBadRequest with default headers values
func NewGetRuntimeVolumeBadRequest() *GetRuntimeVolumeBadRequest {

	return &GetRuntimeVolumeBadRequest{}
}

// WithPayload adds the payload to the get runtime volume bad request response
func (o *GetRuntimeVolumeBadRequest) WithPayload(payload string) *GetRuntimeVolumeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runtime volume bad request response
func (o *GetRuntimeVolumeBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRuntimeVolumeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRuntimeVolumeNotFoundCode is the HTTP code returned for type GetRuntimeVolumeNotFound
const GetRuntimeVolumeNotFoundCode int = 404

/*GetRuntimeVolumeNotFound Not found

swagger:response getRuntimeVolumeNotFound
*/
type GetRuntimeVolumeNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetRuntimeVolumeNotFound creates GetRuntimeVolumeNotFound with default headers values
func NewGetRuntimeVolumeNotFound() *GetRuntimeVolumeNotFound {

	return &GetRuntimeVolumeNotFound{}
}

// WithPayload adds the payload to the get runtime volume not found response
func (o *GetRuntimeVolumeNotFound) WithPayload(payload string) *GetRuntimeVolumeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runtime volume not found response
func (o *GetRuntimeVolumeNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRuntimeVolumeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRuntimeVolumeInternalServerErrorCode is the HTTP code returned for type GetRuntimeVolumeInternalServerError
const GetRuntimeVolumeInternalServerErrorCode int = 500

/*GetRuntimeVolumeInternalServerError Internal error

swagger:response getRuntimeVolumeInternalServerError
*/
type GetRuntimeVolumeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetRuntimeVolumeInternalServerError creates GetRuntimeVolumeInternalServerError with default headers values
func NewGetRuntimeVolumeInternalServerError() *GetRuntimeVolumeInternalServerError {

	return &GetRuntimeVolumeInternalServerError{}
}

// WithPayload adds the payload to the get runtime volume internal server error response
func (o *GetRuntimeVolumeInternalServerError) WithPayload(payload string) *GetRuntimeVolumeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get runtime volume internal server error response
func (o *GetRuntimeVolumeInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRuntimeVolumeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
